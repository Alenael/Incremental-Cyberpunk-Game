import {test} from 'vitest';
import {strict as assert} from 'assert';

import {BFN} from '/@/utils/BigNumber/BigNumberOverride';
import {toMoney} from '/@/utils/BigNumber/BigNumberConfig';

/* Metdata used for money tests 
key: Scenmario Name
Value: [
  string: Expected Output
  number: BigNumber Input
}*/
let stringTestValues = {
  $15: ['$15.27', 1.5e1 + 0.27],
  $150: ['$150.27', 1.5e2 + 0.27],
  '$1,500': ['$1,500.27', 1.5e3 + 0.27],
  '$15,000': ['$15,000.27', 1.5e4 + 0.27],
  '$150,000': ['$150,000.27', 1.5e5 + 0.27],
  '$1,500,000': ['$1.50m', 1.5e6 + 0.27],
  '$15,000,000': ['$15.00m', 1.5e7 + 0.27],
  '$150,000,000': ['$150.00m', 1.5e8 + 0.27],
  '$1,500,000,000': ['$1.50b', 1.5e9 + 0.27],
  '$15,000,000,000': ['$15.00b', 1.5e10 + 0.27],
  '$150,000,000,000': ['$150.00b', 1.5e11 + 0.27],
  '$1,500,000,000,000': ['$1.50t', 1.5e12 + 0.27],
  '$15,000,000,000,000': ['$15.00t', 1.5e13 + 0.27],
  '$150,000,000,000,000': ['$150.00t', 1.5e14 + 0.27],
  '$1,500,000,000,000,000': ['$1.50q', 1.5e15 + 0.27],
  '$15,000,000,000,000,000': ['$15.00q', 1.5e16 + 0.27],
  '$150,000,000,000,000,000': ['$150.00q', 1.5e17 + 0.27],
  '$1,500,000,000,000,000,000': ['$1.50Q', 1.5e18 + 0.27],
  '$15,000,000,000,000,000,000': ['$15.00Q', 1.5e19 + 0.27],
  '$150,000,000,000,000,000,000': ['$150.00Q', 1.5e20 + 0.27],
  '$1,500,000,000,000,000,000,000': ['$1.50s', 1.5e21 + 0.27],
  '$15,000,000,000,000,000,000,000': ['$15.00s', 1.5e22 + 0.27],
  '$150,000,000,000,000,000,000,000': ['$150.00s', 1.5e23 + 0.27],
  '$1,500,000,000,000,000,000,000,000': ['$1.50S', 1.5e24 + 0.27],
  '$15,000,000,000,000,000,000,000,000': ['$15.00S', 1.5e25 + 0.27],
  '$150,000,000,000,000,000,000,000,000': ['$150.00S', 1.5e26 + 0.27],
  '$1,500,000,000,000,000,000,000,000,000': ['$1.50o', 1.5e27 + 0.27],
  '$15,000,000,000,000,000,000,000,000,000': ['$15.00o', 1.5e28 + 0.27],
  '$150,000,000,000,000,010,000,000,000,000': ['$150.00o', 1.5e29 + 0.27],
};

test('toMoney Tests', async () => {
  for (const [key, value] of Object.entries(stringTestValues)) {
    const expected = value[0];
    var number = new BFN(value[1]);
    const actual = toMoney(number);
    assert.equal(actual, expected, `Failed to create correct value for ${key}`);
  }
});
